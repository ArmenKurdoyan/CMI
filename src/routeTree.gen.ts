/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ContactsNewImport } from './routes/contacts/new'
import { Route as ContactsContactIdImport } from './routes/contacts/$contactId'
import { Route as ContactsEditContactIdImport } from './routes/contacts/edit.$contactId'

// Create/Update Routes

const ContactsNewRoute = ContactsNewImport.update({
  id: '/contacts/new',
  path: '/contacts/new',
  getParentRoute: () => rootRoute,
} as any)

const ContactsContactIdRoute = ContactsContactIdImport.update({
  id: '/contacts/$contactId',
  path: '/contacts/$contactId',
  getParentRoute: () => rootRoute,
} as any)

const ContactsEditContactIdRoute = ContactsEditContactIdImport.update({
  id: '/contacts/edit/$contactId',
  path: '/contacts/edit/$contactId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/contacts/$contactId': {
      id: '/contacts/$contactId'
      path: '/contacts/$contactId'
      fullPath: '/contacts/$contactId'
      preLoaderRoute: typeof ContactsContactIdImport
      parentRoute: typeof rootRoute
    }
    '/contacts/new': {
      id: '/contacts/new'
      path: '/contacts/new'
      fullPath: '/contacts/new'
      preLoaderRoute: typeof ContactsNewImport
      parentRoute: typeof rootRoute
    }
    '/contacts/edit/$contactId': {
      id: '/contacts/edit/$contactId'
      path: '/contacts/edit/$contactId'
      fullPath: '/contacts/edit/$contactId'
      preLoaderRoute: typeof ContactsEditContactIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/contacts/$contactId': typeof ContactsContactIdRoute
  '/contacts/new': typeof ContactsNewRoute
  '/contacts/edit/$contactId': typeof ContactsEditContactIdRoute
}

export interface FileRoutesByTo {
  '/contacts/$contactId': typeof ContactsContactIdRoute
  '/contacts/new': typeof ContactsNewRoute
  '/contacts/edit/$contactId': typeof ContactsEditContactIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/contacts/$contactId': typeof ContactsContactIdRoute
  '/contacts/new': typeof ContactsNewRoute
  '/contacts/edit/$contactId': typeof ContactsEditContactIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/contacts/$contactId'
    | '/contacts/new'
    | '/contacts/edit/$contactId'
  fileRoutesByTo: FileRoutesByTo
  to: '/contacts/$contactId' | '/contacts/new' | '/contacts/edit/$contactId'
  id:
    | '__root__'
    | '/contacts/$contactId'
    | '/contacts/new'
    | '/contacts/edit/$contactId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ContactsContactIdRoute: typeof ContactsContactIdRoute
  ContactsNewRoute: typeof ContactsNewRoute
  ContactsEditContactIdRoute: typeof ContactsEditContactIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  ContactsContactIdRoute: ContactsContactIdRoute,
  ContactsNewRoute: ContactsNewRoute,
  ContactsEditContactIdRoute: ContactsEditContactIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/contacts/$contactId",
        "/contacts/new",
        "/contacts/edit/$contactId"
      ]
    },
    "/contacts/$contactId": {
      "filePath": "contacts/$contactId.ts"
    },
    "/contacts/new": {
      "filePath": "contacts/new.ts"
    },
    "/contacts/edit/$contactId": {
      "filePath": "contacts/edit.$contactId.ts"
    }
  }
}
ROUTE_MANIFEST_END */
